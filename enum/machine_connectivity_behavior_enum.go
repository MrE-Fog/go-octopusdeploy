// Code generated by go-enum
// DO NOT EDIT!

package enum

import (
	"fmt"
	"strings"
)

const (
	// ExpectedToBeOnline is a MachineConnectivityBehavior of type ExpectedToBeOnline
	ExpectedToBeOnline MachineConnectivityBehavior = iota
	// MayBeOfflineAndCanBeSkipped is a MachineConnectivityBehavior of type MayBeOfflineAndCanBeSkipped
	MayBeOfflineAndCanBeSkipped
)

const _MachineConnectivityBehaviorName = "ExpectedToBeOnlineMayBeOfflineAndCanBeSkipped"

var _MachineConnectivityBehaviorNames = []string{
	_MachineConnectivityBehaviorName[0:18],
	_MachineConnectivityBehaviorName[18:45],
}

// MachineConnectivityBehaviorNames returns a list of possible string values of MachineConnectivityBehavior.
func MachineConnectivityBehaviorNames() []string {
	tmp := make([]string, len(_MachineConnectivityBehaviorNames))
	copy(tmp, _MachineConnectivityBehaviorNames)
	return tmp
}

var _MachineConnectivityBehaviorMap = map[MachineConnectivityBehavior]string{
	0: _MachineConnectivityBehaviorName[0:18],
	1: _MachineConnectivityBehaviorName[18:45],
}

// String implements the Stringer interface.
func (x MachineConnectivityBehavior) String() string {
	if str, ok := _MachineConnectivityBehaviorMap[x]; ok {
		return str
	}
	return fmt.Sprintf("MachineConnectivityBehavior(%d)", x)
}

var _MachineConnectivityBehaviorValue = map[string]MachineConnectivityBehavior{
	_MachineConnectivityBehaviorName[0:18]:                   0,
	strings.ToLower(_MachineConnectivityBehaviorName[0:18]):  0,
	_MachineConnectivityBehaviorName[18:45]:                  1,
	strings.ToLower(_MachineConnectivityBehaviorName[18:45]): 1,
}

// ParseMachineConnectivityBehavior attempts to convert a string to a MachineConnectivityBehavior
func ParseMachineConnectivityBehavior(name string) (MachineConnectivityBehavior, error) {
	if x, ok := _MachineConnectivityBehaviorValue[name]; ok {
		return x, nil
	}
	return MachineConnectivityBehavior(0), fmt.Errorf("%s is not a valid MachineConnectivityBehavior, try [%s]", name, strings.Join(_MachineConnectivityBehaviorNames, ", "))
}

// MarshalText implements the text marshaller method
func (x MachineConnectivityBehavior) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *MachineConnectivityBehavior) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseMachineConnectivityBehavior(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
