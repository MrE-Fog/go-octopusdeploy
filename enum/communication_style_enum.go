// Code generated by go-enum
// DO NOT EDIT!

package enum

import (
	"fmt"
	"strings"
)

const (
	// None is a CommunicationStyle of type None
	None CommunicationStyle = iota
	// TentaclePassive is a CommunicationStyle of type TentaclePassive
	TentaclePassive
	// TentacleActive is a CommunicationStyle of type TentacleActive
	TentacleActive
	// Ssh is a CommunicationStyle of type Ssh
	Ssh
	// OfflineDrop is a CommunicationStyle of type OfflineDrop
	OfflineDrop
	// AzureWebApp is a CommunicationStyle of type AzureWebApp
	AzureWebApp
	// Ftp is a CommunicationStyle of type Ftp
	Ftp
	// AzureCloudService is a CommunicationStyle of type AzureCloudService
	AzureCloudService
	// AzureServiceFabricCluster is a CommunicationStyle of type AzureServiceFabricCluster
	AzureServiceFabricCluster
	// Kubernetes is a CommunicationStyle of type Kubernetes
	Kubernetes
)

const _CommunicationStyleName = "NoneTentaclePassiveTentacleActiveSshOfflineDropAzureWebAppFtpAzureCloudServiceAzureServiceFabricClusterKubernetes"

var _CommunicationStyleNames = []string{
	_CommunicationStyleName[0:4],
	_CommunicationStyleName[4:19],
	_CommunicationStyleName[19:33],
	_CommunicationStyleName[33:36],
	_CommunicationStyleName[36:47],
	_CommunicationStyleName[47:58],
	_CommunicationStyleName[58:61],
	_CommunicationStyleName[61:78],
	_CommunicationStyleName[78:103],
	_CommunicationStyleName[103:113],
}

// CommunicationStyleNames returns a list of possible string values of CommunicationStyle.
func CommunicationStyleNames() []string {
	tmp := make([]string, len(_CommunicationStyleNames))
	copy(tmp, _CommunicationStyleNames)
	return tmp
}

var _CommunicationStyleMap = map[CommunicationStyle]string{
	0: _CommunicationStyleName[0:4],
	1: _CommunicationStyleName[4:19],
	2: _CommunicationStyleName[19:33],
	3: _CommunicationStyleName[33:36],
	4: _CommunicationStyleName[36:47],
	5: _CommunicationStyleName[47:58],
	6: _CommunicationStyleName[58:61],
	7: _CommunicationStyleName[61:78],
	8: _CommunicationStyleName[78:103],
	9: _CommunicationStyleName[103:113],
}

// String implements the Stringer interface.
func (x CommunicationStyle) String() string {
	if str, ok := _CommunicationStyleMap[x]; ok {
		return str
	}
	return fmt.Sprintf("CommunicationStyle(%d)", x)
}

var _CommunicationStyleValue = map[string]CommunicationStyle{
	_CommunicationStyleName[0:4]:                      0,
	strings.ToLower(_CommunicationStyleName[0:4]):     0,
	_CommunicationStyleName[4:19]:                     1,
	strings.ToLower(_CommunicationStyleName[4:19]):    1,
	_CommunicationStyleName[19:33]:                    2,
	strings.ToLower(_CommunicationStyleName[19:33]):   2,
	_CommunicationStyleName[33:36]:                    3,
	strings.ToLower(_CommunicationStyleName[33:36]):   3,
	_CommunicationStyleName[36:47]:                    4,
	strings.ToLower(_CommunicationStyleName[36:47]):   4,
	_CommunicationStyleName[47:58]:                    5,
	strings.ToLower(_CommunicationStyleName[47:58]):   5,
	_CommunicationStyleName[58:61]:                    6,
	strings.ToLower(_CommunicationStyleName[58:61]):   6,
	_CommunicationStyleName[61:78]:                    7,
	strings.ToLower(_CommunicationStyleName[61:78]):   7,
	_CommunicationStyleName[78:103]:                   8,
	strings.ToLower(_CommunicationStyleName[78:103]):  8,
	_CommunicationStyleName[103:113]:                  9,
	strings.ToLower(_CommunicationStyleName[103:113]): 9,
}

// ParseCommunicationStyle attempts to convert a string to a CommunicationStyle
func ParseCommunicationStyle(name string) (CommunicationStyle, error) {
	if x, ok := _CommunicationStyleValue[name]; ok {
		return x, nil
	}
	return CommunicationStyle(0), fmt.Errorf("%s is not a valid CommunicationStyle, try [%s]", name, strings.Join(_CommunicationStyleNames, ", "))
}

// MarshalText implements the text marshaller method
func (x CommunicationStyle) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *CommunicationStyle) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseCommunicationStyle(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
