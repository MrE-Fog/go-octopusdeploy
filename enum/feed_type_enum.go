// Code generated by go-enum
// DO NOT EDIT!

package enum

import (
	"fmt"
	"strings"
)

const (
	// None is a FeedType of type None
	None FeedType = iota
	// NuGet is a FeedType of type NuGet
	NuGet
	// Docker is a FeedType of type Docker
	Docker
	// Maven is a FeedType of type Maven
	Maven
	// OctopusProject is a FeedType of type OctopusProject
	OctopusProject
	// GitHub is a FeedType of type GitHub
	GitHub
	// BuiltIn is a FeedType of type BuiltIn
	BuiltIn
	// Helm is a FeedType of type Helm
	Helm
	// AwsElasticContainerRegistry is a FeedType of type AwsElasticContainerRegistry
	AwsElasticContainerRegistry
)

const _FeedTypeName = "NoneNuGetDockerMavenOctopusProjectGitHubBuiltInHelmAwsElasticContainerRegistry"

var _FeedTypeNames = []string{
	_FeedTypeName[0:4],
	_FeedTypeName[4:9],
	_FeedTypeName[9:15],
	_FeedTypeName[15:20],
	_FeedTypeName[20:34],
	_FeedTypeName[34:40],
	_FeedTypeName[40:47],
	_FeedTypeName[47:51],
	_FeedTypeName[51:78],
}

// FeedTypeNames returns a list of possible string values of FeedType.
func FeedTypeNames() []string {
	tmp := make([]string, len(_FeedTypeNames))
	copy(tmp, _FeedTypeNames)
	return tmp
}

var _FeedTypeMap = map[FeedType]string{
	0: _FeedTypeName[0:4],
	1: _FeedTypeName[4:9],
	2: _FeedTypeName[9:15],
	3: _FeedTypeName[15:20],
	4: _FeedTypeName[20:34],
	5: _FeedTypeName[34:40],
	6: _FeedTypeName[40:47],
	7: _FeedTypeName[47:51],
	8: _FeedTypeName[51:78],
}

// String implements the Stringer interface.
func (x FeedType) String() string {
	if str, ok := _FeedTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("FeedType(%d)", x)
}

var _FeedTypeValue = map[string]FeedType{
	_FeedTypeName[0:4]:                    0,
	strings.ToLower(_FeedTypeName[0:4]):   0,
	_FeedTypeName[4:9]:                    1,
	strings.ToLower(_FeedTypeName[4:9]):   1,
	_FeedTypeName[9:15]:                   2,
	strings.ToLower(_FeedTypeName[9:15]):  2,
	_FeedTypeName[15:20]:                  3,
	strings.ToLower(_FeedTypeName[15:20]): 3,
	_FeedTypeName[20:34]:                  4,
	strings.ToLower(_FeedTypeName[20:34]): 4,
	_FeedTypeName[34:40]:                  5,
	strings.ToLower(_FeedTypeName[34:40]): 5,
	_FeedTypeName[40:47]:                  6,
	strings.ToLower(_FeedTypeName[40:47]): 6,
	_FeedTypeName[47:51]:                  7,
	strings.ToLower(_FeedTypeName[47:51]): 7,
	_FeedTypeName[51:78]:                  8,
	strings.ToLower(_FeedTypeName[51:78]): 8,
}

// ParseFeedType attempts to convert a string to a FeedType
func ParseFeedType(name string) (FeedType, error) {
	if x, ok := _FeedTypeValue[name]; ok {
		return x, nil
	}
	return FeedType(0), fmt.Errorf("%s is not a valid FeedType, try [%s]", name, strings.Join(_FeedTypeNames, ", "))
}

// MarshalText implements the text marshaller method
func (x FeedType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *FeedType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseFeedType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
