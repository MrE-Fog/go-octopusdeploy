// Code generated by go-enum
// DO NOT EDIT!

package enum

import (
	"fmt"
	"strings"
)

const (
	// NoFeedType is a FeedType of type NoFeedType
	NoFeedType FeedType = iota
	// NuGet is a FeedType of type NuGet
	NuGet
	// Docker is a FeedType of type Docker
	Docker
	// Maven is a FeedType of type Maven
	Maven
	// OctopusProject is a FeedType of type OctopusProject
	OctopusProject
	// GitHub is a FeedType of type GitHub
	GitHub
	// BuiltIn is a FeedType of type BuiltIn
	BuiltIn
	// Helm is a FeedType of type Helm
	Helm
	// AwsElasticContainerRegistry is a FeedType of type AwsElasticContainerRegistry
	AwsElasticContainerRegistry
)

const _FeedTypeName = "NoFeedTypeNuGetDockerMavenOctopusProjectGitHubBuiltInHelmAwsElasticContainerRegistry"

var _FeedTypeNames = []string{
	_FeedTypeName[0:10],
	_FeedTypeName[10:15],
	_FeedTypeName[15:21],
	_FeedTypeName[21:26],
	_FeedTypeName[26:40],
	_FeedTypeName[40:46],
	_FeedTypeName[46:53],
	_FeedTypeName[53:57],
	_FeedTypeName[57:84],
}

// FeedTypeNames returns a list of possible string values of FeedType.
func FeedTypeNames() []string {
	tmp := make([]string, len(_FeedTypeNames))
	copy(tmp, _FeedTypeNames)
	return tmp
}

var _FeedTypeMap = map[FeedType]string{
	0: _FeedTypeName[0:10],
	1: _FeedTypeName[10:15],
	2: _FeedTypeName[15:21],
	3: _FeedTypeName[21:26],
	4: _FeedTypeName[26:40],
	5: _FeedTypeName[40:46],
	6: _FeedTypeName[46:53],
	7: _FeedTypeName[53:57],
	8: _FeedTypeName[57:84],
}

// String implements the Stringer interface.
func (x FeedType) String() string {
	if str, ok := _FeedTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("FeedType(%d)", x)
}

var _FeedTypeValue = map[string]FeedType{
	_FeedTypeName[0:10]:                   0,
	strings.ToLower(_FeedTypeName[0:10]):  0,
	_FeedTypeName[10:15]:                  1,
	strings.ToLower(_FeedTypeName[10:15]): 1,
	_FeedTypeName[15:21]:                  2,
	strings.ToLower(_FeedTypeName[15:21]): 2,
	_FeedTypeName[21:26]:                  3,
	strings.ToLower(_FeedTypeName[21:26]): 3,
	_FeedTypeName[26:40]:                  4,
	strings.ToLower(_FeedTypeName[26:40]): 4,
	_FeedTypeName[40:46]:                  5,
	strings.ToLower(_FeedTypeName[40:46]): 5,
	_FeedTypeName[46:53]:                  6,
	strings.ToLower(_FeedTypeName[46:53]): 6,
	_FeedTypeName[53:57]:                  7,
	strings.ToLower(_FeedTypeName[53:57]): 7,
	_FeedTypeName[57:84]:                  8,
	strings.ToLower(_FeedTypeName[57:84]): 8,
}

// ParseFeedType attempts to convert a string to a FeedType
func ParseFeedType(name string) (FeedType, error) {
	if x, ok := _FeedTypeValue[name]; ok {
		return x, nil
	}
	return FeedType(0), fmt.Errorf("%s is not a valid FeedType, try [%s]", name, strings.Join(_FeedTypeNames, ", "))
}

// MarshalText implements the text marshaller method
func (x FeedType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *FeedType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseFeedType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
