// Code generated by go-enum
// DO NOT EDIT!

package enum

import (
	"fmt"
	"strings"
)

const (
	// DeleteUnavailableMachines is a DeleteMachinesBehavior of type DeleteUnavailableMachines
	DeleteUnavailableMachines DeleteMachinesBehavior = iota
	// DoNotDelete is a DeleteMachinesBehavior of type DoNotDelete
	DoNotDelete
)

const _DeleteMachinesBehaviorName = "DeleteUnavailableMachinesDoNotDelete"

var _DeleteMachinesBehaviorNames = []string{
	_DeleteMachinesBehaviorName[0:25],
	_DeleteMachinesBehaviorName[25:36],
}

// DeleteMachinesBehaviorNames returns a list of possible string values of DeleteMachinesBehavior.
func DeleteMachinesBehaviorNames() []string {
	tmp := make([]string, len(_DeleteMachinesBehaviorNames))
	copy(tmp, _DeleteMachinesBehaviorNames)
	return tmp
}

var _DeleteMachinesBehaviorMap = map[DeleteMachinesBehavior]string{
	0: _DeleteMachinesBehaviorName[0:25],
	1: _DeleteMachinesBehaviorName[25:36],
}

// String implements the Stringer interface.
func (x DeleteMachinesBehavior) String() string {
	if str, ok := _DeleteMachinesBehaviorMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DeleteMachinesBehavior(%d)", x)
}

var _DeleteMachinesBehaviorValue = map[string]DeleteMachinesBehavior{
	_DeleteMachinesBehaviorName[0:25]:                   0,
	strings.ToLower(_DeleteMachinesBehaviorName[0:25]):  0,
	_DeleteMachinesBehaviorName[25:36]:                  1,
	strings.ToLower(_DeleteMachinesBehaviorName[25:36]): 1,
}

// ParseDeleteMachinesBehavior attempts to convert a string to a DeleteMachinesBehavior
func ParseDeleteMachinesBehavior(name string) (DeleteMachinesBehavior, error) {
	if x, ok := _DeleteMachinesBehaviorValue[name]; ok {
		return x, nil
	}
	return DeleteMachinesBehavior(0), fmt.Errorf("%s is not a valid DeleteMachinesBehavior, try [%s]", name, strings.Join(_DeleteMachinesBehaviorNames, ", "))
}

// MarshalText implements the text marshaller method
func (x DeleteMachinesBehavior) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *DeleteMachinesBehavior) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDeleteMachinesBehavior(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
