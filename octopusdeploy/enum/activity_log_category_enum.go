// Code generated by go-enum
// DO NOT EDIT!

package enum

import (
	"fmt"
	"strings"
)

const (
	// Abandoned is a ActivityLogCategory of type Abandoned
	Abandoned ActivityLogCategory = iota
	// Alert is a ActivityLogCategory of type Alert
	Alert
	// Error is a ActivityLogCategory of type Error
	Error
	// Fatal is a ActivityLogCategory of type Fatal
	Fatal
	// Finished is a ActivityLogCategory of type Finished
	Finished
	// Gap is a ActivityLogCategory of type Gap
	Gap
	// Highlight is a ActivityLogCategory of type Highlight
	Highlight
	// Info is a ActivityLogCategory of type Info
	Info
	// Planned is a ActivityLogCategory of type Planned
	Planned
	// Trace is a ActivityLogCategory of type Trace
	Trace
	// Updated is a ActivityLogCategory of type Updated
	Updated
	// Verbose is a ActivityLogCategory of type Verbose
	Verbose
	// Wait is a ActivityLogCategory of type Wait
	Wait
	// Warning is a ActivityLogCategory of type Warning
	Warning
)

const _ActivityLogCategoryName = "AbandonedAlertErrorFatalFinishedGapHighlightInfoPlannedTraceUpdatedVerboseWaitWarning"

var _ActivityLogCategoryNames = []string{
	_ActivityLogCategoryName[0:9],
	_ActivityLogCategoryName[9:14],
	_ActivityLogCategoryName[14:19],
	_ActivityLogCategoryName[19:24],
	_ActivityLogCategoryName[24:32],
	_ActivityLogCategoryName[32:35],
	_ActivityLogCategoryName[35:44],
	_ActivityLogCategoryName[44:48],
	_ActivityLogCategoryName[48:55],
	_ActivityLogCategoryName[55:60],
	_ActivityLogCategoryName[60:67],
	_ActivityLogCategoryName[67:74],
	_ActivityLogCategoryName[74:78],
	_ActivityLogCategoryName[78:85],
}

// ActivityLogCategoryNames returns a list of possible string values of ActivityLogCategory.
func ActivityLogCategoryNames() []string {
	tmp := make([]string, len(_ActivityLogCategoryNames))
	copy(tmp, _ActivityLogCategoryNames)
	return tmp
}

var _ActivityLogCategoryMap = map[ActivityLogCategory]string{
	0:  _ActivityLogCategoryName[0:9],
	1:  _ActivityLogCategoryName[9:14],
	2:  _ActivityLogCategoryName[14:19],
	3:  _ActivityLogCategoryName[19:24],
	4:  _ActivityLogCategoryName[24:32],
	5:  _ActivityLogCategoryName[32:35],
	6:  _ActivityLogCategoryName[35:44],
	7:  _ActivityLogCategoryName[44:48],
	8:  _ActivityLogCategoryName[48:55],
	9:  _ActivityLogCategoryName[55:60],
	10: _ActivityLogCategoryName[60:67],
	11: _ActivityLogCategoryName[67:74],
	12: _ActivityLogCategoryName[74:78],
	13: _ActivityLogCategoryName[78:85],
}

// String implements the Stringer interface.
func (x ActivityLogCategory) String() string {
	if str, ok := _ActivityLogCategoryMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ActivityLogCategory(%d)", x)
}

var _ActivityLogCategoryValue = map[string]ActivityLogCategory{
	_ActivityLogCategoryName[0:9]:                    0,
	strings.ToLower(_ActivityLogCategoryName[0:9]):   0,
	_ActivityLogCategoryName[9:14]:                   1,
	strings.ToLower(_ActivityLogCategoryName[9:14]):  1,
	_ActivityLogCategoryName[14:19]:                  2,
	strings.ToLower(_ActivityLogCategoryName[14:19]): 2,
	_ActivityLogCategoryName[19:24]:                  3,
	strings.ToLower(_ActivityLogCategoryName[19:24]): 3,
	_ActivityLogCategoryName[24:32]:                  4,
	strings.ToLower(_ActivityLogCategoryName[24:32]): 4,
	_ActivityLogCategoryName[32:35]:                  5,
	strings.ToLower(_ActivityLogCategoryName[32:35]): 5,
	_ActivityLogCategoryName[35:44]:                  6,
	strings.ToLower(_ActivityLogCategoryName[35:44]): 6,
	_ActivityLogCategoryName[44:48]:                  7,
	strings.ToLower(_ActivityLogCategoryName[44:48]): 7,
	_ActivityLogCategoryName[48:55]:                  8,
	strings.ToLower(_ActivityLogCategoryName[48:55]): 8,
	_ActivityLogCategoryName[55:60]:                  9,
	strings.ToLower(_ActivityLogCategoryName[55:60]): 9,
	_ActivityLogCategoryName[60:67]:                  10,
	strings.ToLower(_ActivityLogCategoryName[60:67]): 10,
	_ActivityLogCategoryName[67:74]:                  11,
	strings.ToLower(_ActivityLogCategoryName[67:74]): 11,
	_ActivityLogCategoryName[74:78]:                  12,
	strings.ToLower(_ActivityLogCategoryName[74:78]): 12,
	_ActivityLogCategoryName[78:85]:                  13,
	strings.ToLower(_ActivityLogCategoryName[78:85]): 13,
}

// ParseActivityLogCategory attempts to convert a string to a ActivityLogCategory
func ParseActivityLogCategory(name string) (ActivityLogCategory, error) {
	if x, ok := _ActivityLogCategoryValue[name]; ok {
		return x, nil
	}
	return ActivityLogCategory(0), fmt.Errorf("%s is not a valid ActivityLogCategory, try [%s]", name, strings.Join(_ActivityLogCategoryNames, ", "))
}

// MarshalText implements the text marshaller method
func (x ActivityLogCategory) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *ActivityLogCategory) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseActivityLogCategory(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
