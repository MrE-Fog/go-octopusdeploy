// Code generated by go-enum
// DO NOT EDIT!

package enums

import (
	"fmt"
	"strings"
)

const (
	// ScriptModule is a VariableSetContentType of type ScriptModule
	ScriptModule VariableSetContentType = iota
	// Variables is a VariableSetContentType of type Variables
	Variables
)

const _VariableSetContentTypeName = "ScriptModuleVariables"

var _VariableSetContentTypeNames = []string{
	_VariableSetContentTypeName[0:12],
	_VariableSetContentTypeName[12:21],
}

// VariableSetContentTypeNames returns a list of possible string values of VariableSetContentType.
func VariableSetContentTypeNames() []string {
	tmp := make([]string, len(_VariableSetContentTypeNames))
	copy(tmp, _VariableSetContentTypeNames)
	return tmp
}

var _VariableSetContentTypeMap = map[VariableSetContentType]string{
	0: _VariableSetContentTypeName[0:12],
	1: _VariableSetContentTypeName[12:21],
}

// String implements the Stringer interface.
func (x VariableSetContentType) String() string {
	if str, ok := _VariableSetContentTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("VariableSetContentType(%d)", x)
}

var _VariableSetContentTypeValue = map[string]VariableSetContentType{
	_VariableSetContentTypeName[0:12]:                   0,
	strings.ToLower(_VariableSetContentTypeName[0:12]):  0,
	_VariableSetContentTypeName[12:21]:                  1,
	strings.ToLower(_VariableSetContentTypeName[12:21]): 1,
}

// ParseVariableSetContentType attempts to convert a string to a VariableSetContentType
func ParseVariableSetContentType(name string) (VariableSetContentType, error) {
	if x, ok := _VariableSetContentTypeValue[name]; ok {
		return x, nil
	}
	return VariableSetContentType(0), fmt.Errorf("%s is not a valid VariableSetContentType, try [%s]", name, strings.Join(_VariableSetContentTypeNames, ", "))
}

// MarshalText implements the text marshaller method
func (x VariableSetContentType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *VariableSetContentType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseVariableSetContentType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
